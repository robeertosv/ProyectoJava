/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.rk.javabnb.UI;

import com.rk.javabnb.Inmuebles.Reserva;
import com.rk.javabnb.Usuarios.Admin;
import com.rk.javabnb.Usuarios.Anfitrion;
import com.rk.javabnb.Usuarios.Cliente;
import com.rk.javabnb.Usuarios.ClienteParticular;
import com.rk.javabnb.db.Database;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Collections;

/**
 *
 * @author admin
 */
public class HomeReservas extends javax.swing.JFrame {

    /**
     * Creates new form HomeReservas
     */
    public HomeReservas(String persona) {
        setVisible(true);
        this.persona = persona;
        initComponents();
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);

        //muestra las reservas, dependiendo de quien está loggeado - el admin las puede ver todas, el anfitrion solo las de su inmueble y el particular solo las que ha hecho (y puede dejar reseñas)
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        filtrosComboBox = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JToggleButton();
        menuComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        containerPanel = new JPanel(new GridLayout(0, 1));

        for(Reserva reserva : Database.getReservas()) {
            String tipo = Database.getCurrentUser().getFirst().getClass().getSimpleName();

            if(tipo.equals("Admin")) {
                containerPanel.add(new ReservaPreview(reserva, reserva.getAnfitrion().getNombre()));
            }else if (tipo.equals("Anfitrion")) {
                Anfitrion anf = (Anfitrion) Database.getCurrentUser().getFirst();
                if(reserva.getAnfitrion().getEmail().equals(anf.getEmail())) {
                    containerPanel.add(new ReservaPreview(reserva, reserva.getAnfitrion().getNombre()));
                }
            }else if(tipo.equals("ClienteParticular")) {
                ClienteParticular cli = (ClienteParticular) Database.getCurrentUser().getFirst();;
                if(reserva.getParticular().getEmail().equals(cli.getEmail())) {
                    containerPanel.add(new ReservaPreview(reserva, reserva.getAnfitrion().getNombre()));
                }
            }
        }

        this.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formClosing();
            }
        });
        this.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("           ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel1, gridBagConstraints);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/small_logo.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 11, 0, 11);
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextField1.setMinimumSize(new java.awt.Dimension(136, 27));
        jTextField1.setPreferredSize(new java.awt.Dimension(136, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 14;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel1.add(jTextField1, gridBagConstraints);

        filtrosComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nombre", "Primero nuevas", "Primero antiguas" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel1.add(filtrosComboBox, gridBagConstraints);

        searchButton.setText("Buscar");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        jPanel1.add(searchButton, gridBagConstraints);

        String nombreCurrent = "Admin";
        if(Database.getCurrentUser().get(0) instanceof ClienteParticular){
            nombreCurrent = Database.getNombreParticular();
        }else if(Database.getCurrentUser().get(0) instanceof Anfitrion){
            nombreCurrent = Database.getNombreAnfitrion();
        }
        menuComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {nombreCurrent,"Volver al menú", "Cerrar sesión" }));
        menuComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 16, 0, 16);
        jPanel1.add(menuComboBox, gridBagConstraints);

        jScrollPane1.setViewportView(containerPanel);
        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);
        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        if(Database.getCurrentUser().get(0) instanceof Anfitrion) { //le enseña al anfitrion todas las reservas de sus inmuebles
            ArrayList<ReservaPreview> resultado = new ArrayList<>();
            boolean huboResultados = false;
            switch (this.filtrosComboBox.getSelectedIndex()) {
                case 0: //nombre
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        if(r.getAnfitrion().equals(Database.getCurrentAnfitrion())){
                            if(r.toString().toLowerCase().contains(this.jTextField1.getText().toLowerCase())) {
                                resultado.add(r);
                                huboResultados = true;
                            }
                        }
                    }
                    break;
                case 1: //primero nuevas
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        if(r.getAnfitrion().equals(Database.getCurrentAnfitrion())){
                            resultado.add(r);
                            huboResultados = true;
                        }
                        Collections.sort(resultado);
                    }
                    break;
                case 2: //primero antiguas
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        if(r.getAnfitrion().equals(Database.getCurrentAnfitrion())){
                            resultado.add(r);
                            huboResultados = true;
                        }
                        Collections.sort(resultado);
                        Collections.reverse(resultado);
                    }
                    break;
            }
            if (huboResultados) {
                this.containerPanel.removeAll();
                for (ReservaPreview i : resultado) {
                    this.containerPanel.add(i);
                }
                this.jScrollPane1.setViewportView(containerPanel);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontraron resultados para: " + this.jTextField1.getText(), "No se encontraron resultados", JOptionPane.WARNING_MESSAGE);
                this.containerPanel.removeAll();
                for (ReservaPreview panel : Database.getReservaPreviews()) {
                    if(panel.getAnfitrion().equals(Database.getCurrentAnfitrion())) {
                        containerPanel.add(panel);
                    }
                }
                this.jScrollPane1.setViewportView(containerPanel);
            }
        }
        if(Database.getCurrentUser().get(0) instanceof ClienteParticular) { //le enseña a particular sus reservas
            ArrayList<ReservaPreview> resultado = new ArrayList<>();
            boolean huboResultados = false;
            switch (this.filtrosComboBox.getSelectedIndex()) {
                case 0: //nombre
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        if(r.getParticular().equals(Database.getCurrentParticular())){
                            if(r.toString().toLowerCase().contains(this.jTextField1.getText().toLowerCase())) {
                                resultado.add(r);
                                huboResultados = true;
                            }
                        }
                    }
                    break;
                case 1: //primero nuevas
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        if(r.getParticular().equals(Database.getCurrentParticular())){
                            resultado.add(r);
                            huboResultados = true;
                        }
                        Collections.sort(resultado);
                    }
                    break;
                case 2: //primero antiguas
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        if(r.getParticular().equals(Database.getCurrentParticular())){
                            resultado.add(r);
                            huboResultados = true;
                        }
                        Collections.sort(resultado);
                        Collections.reverse(resultado);
                    }
                    break;
            }
            if (huboResultados) {
                this.containerPanel.removeAll();
                for (ReservaPreview i : resultado) {
                    this.containerPanel.add(i);
                }
                this.jScrollPane1.setViewportView(containerPanel);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontraron resultados para: " + this.jTextField1.getText(), "No se encontraron resultados", JOptionPane.WARNING_MESSAGE);
                this.containerPanel.removeAll();
                for (ReservaPreview panel : Database.getReservaPreviews()) {
                    if(panel.getParticular().equals(Database.getCurrentParticular())) {
                        containerPanel.add(panel);
                    }
                }
                this.jScrollPane1.setViewportView(containerPanel);
            }
        }
        if((persona.equals("particular"))&&(Database.getCurrentUser().get(0) instanceof Admin)) { //le enseña al admin los detalles de un particular
            ArrayList<ReservaPreview> resultado = new ArrayList<>();
            boolean huboResultados = false;
            switch (this.filtrosComboBox.getSelectedIndex()) {
                case 0: //nombre
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        if(r.getParticular().equals(Database.getClienteVerMas())){
                            if(r.toString().toLowerCase().contains(this.jTextField1.getText().toLowerCase())) {
                                resultado.add(r);
                                huboResultados = true;
                            }
                        }
                    }
                    break;
                case 1: //primero nuevas
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        if(r.getParticular().equals(Database.getClienteVerMas())){
                            resultado.add(r);
                            huboResultados = true;
                        }
                        Collections.sort(resultado);
                    }
                    break;
                case 2: //primero antiguas
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        if(r.getParticular().equals(Database.getClienteVerMas())){
                            resultado.add(r);
                            huboResultados = true;
                        }
                        Collections.sort(resultado);
                        Collections.reverse(resultado);
                    }
                    break;
            }
            if (huboResultados) {
                this.containerPanel.removeAll();
                for (ReservaPreview i : resultado) {
                    this.containerPanel.add(i);
                }
                this.jScrollPane1.setViewportView(containerPanel);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontraron resultados para: " + this.jTextField1.getText(), "No se encontraron resultados", JOptionPane.WARNING_MESSAGE);
                this.containerPanel.removeAll();
                for (ReservaPreview panel : Database.getReservaPreviews()) {
                    if(panel.getParticular().equals(Database.getClienteVerMas())) {
                        containerPanel.add(panel);
                    }
                }
                this.jScrollPane1.setViewportView(containerPanel);
            }
        }
        if((Database.getCurrentUser().get(0) instanceof Admin)&&(persona.equals("admin"))) {
            ArrayList<ReservaPreview> resultado = new ArrayList<>();
            boolean huboResultados = false;
            switch (this.filtrosComboBox.getSelectedIndex()) {
                case 0: //nombre
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        if(r.toString().toLowerCase().contains(this.jTextField1.getText().toLowerCase())) {
                            resultado.add(r);
                            huboResultados = true;
                        }
                    }
                    break;
                case 1: //primero nuevas
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        resultado.add(r);
                        huboResultados = true;
                    }
                    Collections.sort(resultado);
                    break;
                case 2: //primero antiguas
                    for (ReservaPreview r: Database.getReservaPreviews()){
                        resultado.add(r);
                        huboResultados = true;
                    }
                    Collections.sort(resultado);
                    Collections.reverse(resultado);
                    break;
            }
            if (huboResultados) {
                this.containerPanel.removeAll();
                for (ReservaPreview i : resultado) {
                    this.containerPanel.add(i);
                }
                this.jScrollPane1.setViewportView(containerPanel);
            } else {
                JOptionPane.showMessageDialog(this, "No se encontraron resultados para: " + this.jTextField1.getText(), "No se encontraron resultados", JOptionPane.WARNING_MESSAGE);
                this.containerPanel.removeAll();
                for (ReservaPreview panel : Database.getReservaPreviews()) {
                    containerPanel.add(panel);
                }
                this.jScrollPane1.setViewportView(containerPanel);
            }
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void menuComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuComboBoxActionPerformed
        switch(menuComboBox.getSelectedIndex()) {
            case 1: //según el usuario loggeado abre su perspectivo menú
                if(Database.getCurrentUser().get(0) instanceof Anfitrion){
                    new MenuAnfitrion();
                }else if(Database.getCurrentUser().get(0) instanceof Admin){
                    new MenuAdmin();
                }else{new MenuParticular();}
                this.dispose();
                this.setVisible(false);
                break;
            case 2: //cierra la sesión
                Database.cerrarSesion();
                new Login();
                this.dispose();
                this.setVisible(false);
                break;
        }
    }//GEN-LAST:event_menuComboBoxActionPerformed

    private void formClosing() {
        Cliente c = (Cliente) Database.getCurrentUser().getFirst();
        new Home(c.getClass().getSimpleName());
        this.dispose();
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeReservas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeReservas().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> filtrosComboBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox<String> menuComboBox;
    private javax.swing.JToggleButton searchButton;
    private JPanel containerPanel;
    // End of variables declaration//GEN-END:variables
    private String persona;
}
